plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations { //프로젝트를 빌드할 때 그래들이 설정 프로세서를 사용하도록 설정
	compileOnly {
		extendsFrom annotationProcessor
	}
}


repositories {
	mavenCentral()
}

ext { // 사용할 스프링 클라우드 버전 정의
	set('springCloudVersion', "2025.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'

	//config 
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	
	//config 서버와 연결을 위한 컨피그 클라이언트에 대한 의존성
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	// 재시도 패턴을 위한 의존성
	implementation 'org.springframework.retry:spring-retry'
	
	// actuator 의존성 추가 -> 새로고침 이벤트를 트리거
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
}


dependencyManagement { //스프링 클라우드의 의존성을 관리하기 위한 BOM
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}



bootRun { //활성화할 프로파일 -> "주의": cmd에서 다음과 같은 명령어로 실행 -> gradlew bootRun
	systemProperty 'spring.profiles.active', 'testdata'
}

tasks.named('test') {
	useJUnitPlatform()
}
